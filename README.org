* simple-git-lfs-server

This is a very simple and example server that implements part of the Git LFS API.

Since this is a test and I am very unexperienced, it supports the basic things to download and upload lfs objects with SSH authentication.

* TODO

+ [X] Create HTTP server that supports POST requests. Library.
+ [X] Handle HTTP POST request and call a given function, i.e. batch_handler().
+ [X] Unpack the contents of the HTTP POST request in batch_handler().
+ [X] Define my own JSON class as an interface to the library.
+ [X] Create the entity batch_response, this will store the actual response to the API call (/batch/objects).

* Milestones.

+ [X] Create an HTTP server and handle the batch API request on /objects/batch. Respond always with a 200 code status but with a JSON saying that the object was not found.
+ [X] Decode the request onto a JSON.
+ [X] Decode that JSON into an object.
+ [X] Process a "download" operation and return always not found for now.
+ [X] Process multiple objects in the response.
+ [X] Implement download operation.
+ [X] The reason why it might not work is because we uploaded the file with Go.
+ [X] Implement upload operation.
+ [X] Reduce compilation time. Improve GNUMake file.
+ [] Convert http to https server.
+ [X] Setup authentication.
+ [] Implement range http request for download operations.
+ [X] Split headers and .cpp files.
+ [] There are some things hard to refactor, for instance, some JSON stuff like creating an object which is actually a typedef; the http server, et cetera. I am going to leave this for the end.
+ [] Test for errors.
+ [] Support verification request.
+ [] Support all error codes.
+ [] Change b64 algorithm.

* Think about what you are doing!

- [] Investigate how opening a file works and understand it. For instance, why are we using a vector of unsigned chars? What is up with iterators?
- [] What happens when we remove objects? Do they have to be deleted from the server too?
- [] If we upload objects that already exists, we do not have to do anything? Not even replacing them?... Weird.
- [] How do people manage dependencies in C++? I do have two for now and the way I proceeded does not look promising. I saw some like conan.io, vcpkg, etc.
- [] How do people structure source code and header files? Project scaffolding.
- [] How can we speed compilation times?
  
* Not supported.

- Ref property.
- Other transfer options that are not "basic".
- Hash algo that is not sha256.
- Authenticated property.
- Expires at property.
- LFS-Authenticate header in 401 responses.

* Headers in UPLOAD operation.

Request.headers:

std::multimap with 8 elements = {
    ["Accept-Encoding"] = "gzip",
    ["Authorization"] = "Basic dGVtcDp0ZW1w",
    ["Content-Length"] = "716800",
    ["Content-Type"] = "application/octet-stream",
    ["Host"] = "localhost:8080",
    ["REMOTE_ADDR"] = "127.0.0.1",
    ["REMOTE_PORT"] = "42464",
    ["User-Agent"] = "git-lfs/3.2.0 (GitHub; linux amd64; go 1.18.2)"
  },

Request.target: /objects/c9c9803e19adb2d139ad00b54f4af71f80c2b2530b10828a913b5b82c18559b8

Request.body: binary raw

* Validation codes covered

** DONE 404 - The object does not exist on the server.
** TODO 409 - The specified hash algorithm disagrees with the server's acceptable options.
** TODO 410 - The object was removed by the owner.
** TODO 422 - Validation error.
** DONE 401 - The authentication credentials are needed, but were not sent. Git LFS will attempt to get the authentication for the request and retry immediately.
** TODO 403 - The user has read, but not write access. Only applicable when the operation in the request is "upload."
** TODO 404 - The Repository does not exist for the user.
** TODO 422 - Validation error with one or more of the objects in the request. This means that none of the requested objects to upload are valid.
