* simple-git-lfs-server

This is a very na√Øve implementation of part of the Git LFS API.

* DONE

+ [X] Create HTTP server that supports POST requests. Library.
+ [X] Handle HTTP POST request and call a given function, i.e. batch_handler().
+ [X] Unpack the contents of the HTTP POST request in batch_handler().
+ [X] Define my own JSON class as an interface to the library.
+ [X] Create the entity batch_response, this will store the actual response to the API call (/batch/objects).
+ [X] Create an HTTP server and handle the batch API request on /objects/batch. Respond always with a 200 code status but with a JSON saying that the object was not found.
+ [X] Decode the request onto a JSON.
+ [X] Decode that JSON into an object.
+ [X] Process a "download" operation and return always not found for now.
+ [X] Process multiple objects in the response.
+ [X] Implement download operation.
+ [X] The reason why it might not work is because we uploaded the file with Go.
+ [X] Implement upload operation.
+ [X] Reduce compilation time. Improve GNUMake file.
+ [X] Support verification request.
+ [X] Setup authentication.
+ [X] Split headers and .cpp files.
+ [X] Test for errors.
+ [X] Fix upload bug.
+ [X] Check if the verify thingy is firing.
+ [X] Test with big file sizes.
+ [X] Test to kill the process while downloading.
+ [X] Convert http to https server.
+ [X] Refactor Makefile.
+ [X] Clean TODOs and FIXMEs.
+ [X] Refactor: orientate stuff towards one paradigm but do not mix them.
+ [X] Change b64 algorithm.
+ [X] Add pthread to makefiles.
+ [X] Support all error codes?...
+ [X] How do we calculate expires_in?
+ [X] Fix convoluted json construction.
+ [X] Run static analyzers.
+ [X] Encapsulate JSON.
+ [X] Reorganize some stuff, create a folder with file utils or something like that.
+ [X] Rename certain objects.
+ [X] Separate some functions from lfs.h.
+ [] Implement Range header.
  
* Questions.

- [] Investigate how opening a file works and understand it. For
  instance, why are we using a vector of unsigned chars? What is up with
  iterators?
- [] What happens when we remove objects? Do they have to be deleted
  from the server too?
- [] If we upload objects that already exists, we do not have to do
  anything? Not even replacing them?... Weird.
- [] How do people manage dependencies in C++? I do have two for now and
  the way I proceeded does not look promising. I saw some like conan.io,
  vcpkg, etc.
- [] How do people structure source code and header files? Project
  scaffolding.
- [] How can we speed compilation times?
- [] Why does the API not require auth for the verify callback?
  Furthermore, the reference Go server crashes if the object does not
  exist... In our case, the auth is necessary for verify too.
- [] When I am downloading a repo with very large files, if I kill the
  process in between, the server seems to keep using a lot of CPU, but I
  am kinda lost on how to avoid that.
- [] How come I do not have to do anything for authentication? (besides
  checking "Authorization" header)
- [] Should we implement the http range request? If so, how? If we do not
  cache the files I think there will be a problem with I/O operations.

* Not supported.

- Ref property.
- Other transfer options that are not "basic".
- Expires at property.

* Dependencies.

- g++ compiler.
- C++14.
- GNU make.
- libpthread, libssl and libcrypto.
- openssl cert and private key before running the server.
