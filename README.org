* simple-git-lfs-server

This is a very simple and example server that implements part of the Git LFS API.

Since this is a test and I am very unexperienced, it supports the basic things to download and upload lfs objects with SSH authentication.

* TODO

+ [X] Create HTTP server that supports POST requests. Library.
+ [X] Handle HTTP POST request and call a given function, i.e. batch_handler().
+ [X] Unpack the contents of the HTTP POST request in batch_handler().
+ [X] Define my own JSON class as an interface to the library.
+ [X] Create the entity batch_response, this will store the actual response to the API call (/batch/objects).

* Milestones.

+ [X] Create an HTTP server and handle the batch API request on /objects/batch. Respond always with a 200 code status but with a JSON saying that the object was not found.
+ [X] Decode the request onto a JSON.
+ [X] Decode that JSON into an object.
+ [X] Process a "download" operation and return always not found for now.
+ [X] Process multiple objects in the response.
+ [X] Implement download operation.
+ [X] The reason why it might not work is because we uploaded the file with Go.
+ [X] Implement upload operation.
+ [X] Reduce compilation time. Improve GNUMake file.
+ [X] Support verification request.
+ [X] Setup authentication.
+ [X] Split headers and .cpp files.
+ [X] Test for errors.
+ [X] Fix upload bug.
+ [] Convert http to https server.
+ [] Refactor.
+ [] Implement range http request for download operations.
+ [] Support all error codes.
+ [] Change b64 algorithm.

* Questions.

- [] Investigate how opening a file works and understand it. For instance, why are we using a vector of unsigned chars? What is up with iterators?
- [] What happens when we remove objects? Do they have to be deleted from the server too?
- [] If we upload objects that already exists, we do not have to do anything? Not even replacing them?... Weird.
- [] How do people manage dependencies in C++? I do have two for now and the way I proceeded does not look promising. I saw some like conan.io, vcpkg, etc.
- [] How do people structure source code and header files? Project scaffolding.
- [] How can we speed compilation times?
- [] Why does the API not require auth for the verify callback? Furthermore, the reference Go server crashes if the object does not exist... In our case, the auth is necessary for verify too.

* Not supported.

- Ref property.
- Other transfer options that are not "basic".
- Hash algo that is not sha256.
- Authenticated property.
- Expires at property.
- LFS-Authenticate header in 401 responses.

* Validation codes covered

** DONE 404 - The object does not exist on the server.
** TODO 409 - The specified hash algorithm disagrees with the server's acceptable options.
** TODO 410 - The object was removed by the owner.
** TODO 422 - Validation error.
** DONE 401 - The authentication credentials are needed, but were not sent. Git LFS will attempt to get the authentication for the request and retry immediately.
** TODO 403 - The user has read, but not write access. Only applicable when the operation in the request is "upload."
** TODO 404 - The Repository does not exist for the user.
** TODO 422 - Validation error with one or more of the objects in the request. This means that none of the requested objects to upload are valid.
